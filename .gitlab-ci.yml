image: node:latest

stages:     # List of stages for jobs, and their order of execution
  - npm
  - lint
  - unit-test-backend
  - unit-test-frontend
  - deploy

npm-backend:
  stage: npm
  script:
    - cd functions
    - echo "Running npm install for backend"
    - npm install
    - echo "npm install is complete"
  cache:
    paths:
      - functions/node_modules/
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - functions/node_modules/

npm-frontend:
  stage: npm
  script:
    - cd app/traste
    - echo "Running npm install for frontend"
    - npm install
    - echo "npm install is complete"
  cache:
    paths:
      - app/traste/node_modules/
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - app/traste/node_modules/

eslint-backend:
  stage: lint
  dependencies: 
    - npm-backend
  script:
    # Install ESLint in this docker container
    - npm install -g eslint
    - cd functions
    - echo "Starting eslint check for all files in the backend"
    - eslint .
    - echo "Done"

eslint-frontend:
  stage: lint
  dependencies: 
    - npm-frontend
  script:
    # Install ESLint in this docker container
    - npm install -g eslint
    - cd app/traste
    - echo "Starting eslint check for all files in the frontend"
    - eslint .
    - echo "Done"

unit-test-backend: 
  stage: unit-test-backend
  dependencies:
    - npm-backend
  script:
    - cd functions
    - echo "Running unit tests for backend"
    - npm run coverage-unit
    - echo "Unit tests for backend are complete"
  coverage: '/Code coverage: \d+\.\d+/'
  artifacts:
    expire_in: 1 year
    when: on_success
    paths:
      - functions/coverage/

unit-test-frontend:
  stage: unit-test-frontend
  dependencies:
    - npm-frontend
  script:
    - cd app/traste
    - echo "Running unit tests for frontend"
    - npm run test -- --coverage
    - echo "Unit tests for frontend are complete"
  coverage: '/Code coverage: \d+\.\d+/'
  artifacts:
    expire_in: 1 year
    when: on_success
    paths:
      - app/traste/coverage/
 
deploy-firestore:
  stage: deploy
  before_script:
    - npm i -g firebase-tools
  script:
    - echo "Deploying firestore..."
    - firebase deploy --only firestore --token $FIREBASE_TOKEN
    - echo "Firestore successfully deployed."
  only:
    refs:
      - main
    changes:
      - firestore.rules
      - firestore.indexes.json

deploy-functions:   # This job runs in the deploy stage.
  stage: deploy     # It only runs when *both* jobs in the test stage complete successfully.
  dependencies: 
    - npm-backend
  before_script:
    - npm i -g firebase-tools
  script:
    - echo "Deploying functions..."
    - cd functions
    - npm install
    - cd ..
    - firebase deploy --only functions --token $FIREBASE_TOKEN
    - echo "Functions successfully deployed."
  only:
    refs:
      - main

deploy-hosting:
  stage: deploy
  dependencies: 
    - npm-frontend
  before_script:
    - npm i -g firebase-tools
  script:
    - cd app/traste
    - echo "Building application"
    - npm run build
    - echo "Building is done"
    - echo "Starting to deploy application"
    - firebase deploy --only hosting --token $FIREBASE_TOKEN
    - echo "Application is deployed"
  only:
    refs:
      - main
